# settings file for BOUT++
# High-Beta reduced MHD case

##################################################
# Global settings used by the core code

NOUT = {{ nout|default('500', true) }}   # number of time-steps
TIMESTEP =  {{ timestep|default('1', true) }}   # time between outputs
archive = 20        # Archive restart files after this number of outputs
wall_limit = {{ walltime|default('1.75', true) }}  # wall time limit (in hours)

ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true   # use twist-shift condition?
ShiftOrder = 0      # interpolation order (1 = nearest neighbour, 0=FFT)
TwistOrder = 0      # order of twist-shift interpolation

MZ = {{ mz|default('129', true) }}  # Z grid points (2^n + 1)
ZPERIOD = {{ zperiod|default('1', true) }}   # Fraction of a torus is 1/zperiod

grid = "{{ gridfile }}"

dump_format = "nc"      # Dump file format. "nc" = NetCDF, "pdb" = PDB
restart_format = "nc"   # Restart file format

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)

[output]

parallel = {{ parallel|default('false', true) }}

##################################################
# Communications
# Fastest setting depends on machine and MPI
# implementation. Do not affect result.

[comms]

async = false           # Use asyncronous sends?
pre_post = false        # Post receives as early as possible
group_nonblock = false  # Use non-blocking group operations?

##################################################
# Laplacian inversion routines

[laplace]

maxmode = 24  # Maximum N to solve for
#type=petsc

##################################################
# FFTs

[fft]

fft_measure = true  # If using FFTW, perform tests to determine fastest method

##################################################
# derivative methods

[ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[ddy]

first = C4
second = C4
upwind = W3

[ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

type = {{ solver|default('petsc', true) }}
max_timestep = 20
enablerestart = true
diagnose = false
monitor_timestep = true
start_timestep = 0.1

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

#mxstep = 1000   # Number of internal steps between outputs
adams_moulton = true # Use Adams-Moulton method (default is BDF)
#func_iter = false     # Functional iteration (default is Newton)

##################################################
# settings for high-beta reduced MHD

[highbeta]

density = 6.0e19       # number density of deuterium [m^-3]
                       # used to produce output normalisations

evolve_jpar = false     # If true, evolve J raher than Psi
                       # EXPERIMENTAL

evolve_pressure = true # If false, switch off all pressure evolution

phi_constraint = false # Solve phi as a constraint (DAE system, needs IDA)

## Effects to include/exclude

include_jpar0 = true     # determines whether to include jpar0 terms
include_curvature = true # include curvature drive term?

compress = false       # set compressible (evolve Vpar)
nonlinear  = false     # include non-linear terms?
compress0 = false       # set compressible (evolve Vpar)

gyroviscous = false
diamag = true         # Include diamagnetic effects?
diamag_grad_t = false  # Include Grad_par(Te) term in Psi equation
diamag_phi0 = true    # Balance ExB against Vd for stationary equilibrium

##################################################
# BRACKET_METHOD flags:
# 0:BRACKET_STD; derivative methods will be determined
#   by the choices C or W in this input file
# 1:BRACKET_SIMPLE; 2:BRACKET_ARAKAWA; 3:BRACKET_CTU.

bm_exb_flag = 0
bm_mag_flag = 0
##################################################################
withflow = false     # With flow or not
D_0 = 130000        # differential potential
D_s = 20            # shear parameter
K_H_term = false    # Contain K-H term
sign = -1           # flow direction
x0 = 0.855          # peak location
D_min = 3000        #constant
##################################################################

eHall = false         # Include electron pressue effects in Ohm's law?
AA    = 2.0          # ion mass in units of proton mass

noshear = false        # zero all shear

relax_j_vac = false    # Relax to zero-current in the vacuum
relax_j_tconst = 1e-2  # Time constant for vacuum relaxation

## Toroidal filtering
bandpass_z = {{ bandpass|default('true',true) }}
bandpass_zmin = {{ zmin_bp|default('2',true) }}
bandpass_zmax = {{ zmax_bp|default('24',true) }}
## default toroidal filter settings
filter_z = {{ filter_z|default('false', true) }}   # remove all except one mode
filter_z_mode = {{ filter_z_mode|default('1', true) }}  # Specify which harmonic to keep (1 = fundamental)
low_pass_z = {{ low_pass_z|default('-1',true) }}    # Keep up to and including this harmonic (-1 = keep all)
zonal_flow = 0    # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_field= 0     # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_bkgd = -1    # remove this zonal harmonic  (-1 = keep zonal harmonic)

## Jpar smoothing
smooth_j_x = true   # Filter Jpar in the X direction
lowpass_j_z = 16   # Remove high-k modes. Specifies maximum harmonic to keep

## shealth bounary
sheath_boundaries = true

## mask in x boundaries
mask_j_x = true

## Magnetic perturbations
include_rmp = false # Read RMP data from grid file

simple_rmp = false  # Enable/disable a simple model of RMP
rmp_n = 3           # Toroidal mode number
rmp_m = 6           # Poloidal mode number
rmp_factor = 1.e-4  # Amplitude of Apar [Tm]
rmp_ramp = 1.e-4    # Timescale [s] of ramp
rmp_polwid = -1.0   # Width of Gaussian factor (< 0 = No Gaussian)
rmp_polpeak = 0.5   # Y location of maximum (fraction)

## Vacuum region control

vacuum_pressure = 0.02 # the pressure below which it is considered vacuum
                       # fraction of peak pressure
vacuum_trans = 0.01   # transition width (fraction of P)

## Resistivity and Hyper-resistivity

vac_lund = 1.e{{ lund|default('8',true) }}    # Lundquist number in vacuum  (negative -> infinity)
core_lund = 1.e{{ lund|default('8',true) }}  # Lundquist number in core (negative -> infinity)
hyperresist = 1.e{{ hyperresist|default('-4',true) }} # Hyper-resistivity coefficient (like 1 / Lundquist number)

## Inner boundary damping

damp_width = -1       # Width of damping region (grid cells)
damp_t_const = 1e-2  # Damping time constant

## Parallel pressure diffusion

diffusion_par = -1.0e-0   # Parallel pressure diffusion (< 0 = none)
diffusion_p4  = -1.0e-5   # parallel hyper-viscous diffusion for pressure (< 0 = none)
diffusion_u4  = 1.0e-5    # parallel hyper-viscous diffusion for vorticity (< 0 = none)
diffusion_a4  = -1.0e-5   # parallel hyper-viscous diffusion for vector potential (< 0 = none)

## heat source in pressure in watts

heating_P = -1   #   heat power in watts (< 0 = none)
hp_width  = 0.1     #   heat width, in percentage of nx (< 0 = none)
hp_length = 0.3    #   heat length in percentage of nx (< 0 = none)

## sink rate in pressure

sink_P = -1   #   sink rate in pressure (< 0 = none)
sp_width  = 0.04     #   sink width, in percentage of nx (< 0 = none)
sp_length = 0.15    #   sink length in percentage of nx (< 0 = none)


## left edge sink rate in vorticity
sink_Ul = -1.0e1        #   left edge sink rate in vorticity (< 0 = none)
su_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
su_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)

## right edge sink rate in vorticity
sink_Ur = -1.0e1        #   right edge sink rate in vorticity (< 0 = none)
su_widthr  = 0.06     #   right edge sink width, in percentage of nx (< 0 = none)
su_lengthr = 0.1     #   right edge sink length in percentage of nx (< 0 = none)

## Viscosity and Hyper-viscosity

viscos_par = -0.1   # Parallel viscosity (< 0 = none)
viscos_perp = -1.0  # Perpendicular
hyperviscos = -1.0  # Radial hyper viscosity

## Compressional terms (only when compress = true)
phi_curv = true    # Include curvature*Grad(phi) in P equation
# gamma = 1.6666

## field inversion flags: Add the following
#  1 - Zero-gradient DC component on inner boundary
#  2 - Zero-gradient AC component on inner boundary
#  4 -      "        DC     "      " outer    "
#  8 -      "        AC     "      " outer    "
# 16 - Zero all DC components of the result
# 32 - Don't use previous solution to start iterations
#      (iterative methods only)
# 64 - Set the width of the boundary layer to 1
# 128 - use 4th order differencing
# 256 - Laplacian = 0 inner boundary (combine 2nd & 4th-order)
# 512 - Laplacian = 0 outer boundary ( sometimes works )

#phi_flags = 74  # inversion flags for phi (2+8+64+128)
phi_flags = 769  # 256 + 512

#apar_flags = 74 # 2+8
apar_flags = 769

##################################################
# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

[All]
scale = 0.0 # default size of initial perturbations

# form of initial profile:
# 0 - constant
# 1 - Gaussian
# 2 - Sinusoidal
# 3 - Mix of mode numbers (like original BOUT)

xs_opt = 1
ys_opt = 1
zs_opt = {{ zs_opt|default('5',true) }}

xs_s0 = 0.5
xs_wd = 0.1

ys_s0 = 0.5
ys_wd = 0.3

zs_mode = {{ zs_mode|default('1',true) }}

# boundary conditions
# -------------------
# dirichlet    - Zero value
# neumann      - Zero gradient
# zerolaplace  - Laplacian = 0, decaying solution
# constlaplace - Laplacian = const, decaying solution
#
# relax( )   - Make boundary condition relaxing

bndry_all = dirichlet_o2 # Default to zero-value

[U]   # vorticity

scale = 1.0e-5

[P]  # pressure
bndry_core = neumann
#scale = 1.0e-5
#bndry_xout = constlaplace

[Psi]  # Vector potential

# zero laplacian
bndry_xin = zerolaplace
bndry_xout = zerolaplace

[J]    # parallel current

# Zero gradient in the core
bndry_core = neumann

[Vpar]

bndry_core = neumann
#bndry_xout = constlaplace

[phi]

bndry_xin = none
bndry_xout = none
bndry_target = neumann

